<?php

/**
 * Implements hook_init()
 */
function training_init() {
  // Hook implementation example: run all the times.
  drupal_set_message(t('In training_init()'));
  
  // Invoke custom hook
  $data = array(1, 2, 3);
  module_invoke_all('training', $data);
  drupal_alter('training', $data);
  drupal_set_message(t('After hook_training_alter() ') . print_r($data, TRUE));  
  
  // Node APIs: node_load, etc... create a page first then load it with node_load 
  $node = node_load(0);
  
  if (user_is_logged_in()) {
    drupal_set_message(t('User is logged in.'));
  }
  else {
    drupal_set_message(t('User is an anonymous user.'));
  }  
}

/**
 * Implements hook_cron()
 */
function training_cron() {
  // Hook implementation example: run only when CRON runs.
  // 
  // $ dr cron
  // In training_init()                                                                                                                                                                                 [status]
  // Cron run successful.                                                                                                                                                                               [success]
  // In training_cron()    
  drupal_set_message(t('In training_cron()'));
}

/**
 * Implements hook_username_alter()
 */
function training_username_alter(&$name, $account) {
  
  // Altering username, visit my account page.
  $name = 'Mr. '. drupal_ucfirst($name);
}

/**
 * Implement hook_training()
 */
function training_training($data) {
  drupal_set_message(t('In hook_training()'));
}

/**
 * Implement hook_training_alter()
 */
function training_training_alter(&$data) {
  $data[] = 4;
}

/**
 * Implements hook_node_presave()
 * 
 * Act on a node being inserted or updated.
 */
function training_node_presave($node) {
  if ($node->nid) {
    drupal_set_message(t('After updating an existing one'));
    $node->training = TRUE;
  }
}

/**
 * Implements hook_node_insert()
 */
function training_node_insert($node) {
  drupal_set_message(t('After saving a new node'));
}

/**
 * Implements hook_node_update()
 */
function training_node_update($node) {
  drupal_set_message(t('After saving an updated post'));
}

/**
 * Implements hook_node_delete()
 */
function training_node_delete($node) {
  drupal_set_message(t('Before deleting a node'));
}


/**
 * Implements hook_menu().
 */
function training_menu() {

  $items['training'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Menu callback',
    'page callback' => 'training_menu_callback',
    'access callback' => TRUE,
  );
  
  
  $items['training/menu_example'] = array(
    // We are using the default menu type, so this can be omitted.
    // 'type' => MENU_NORMAL_ITEM,
    // The menu title. Do NOT use t() which is called by default. 
    'title' => 'Menu Example',
    'description' => 'Simplest possible menu type, and the parent menu entry for others',
    'page callback' => 'training_menu_callback',
    'access callback' => TRUE,
    'expanded' => TRUE,
    'menu_name' => 'main-menu',
  );
  
  // Now provide the actual permissioned menu item.
  $items['training/menu_example/restricted'] = array(

    // The title - do NOT use t() as t() is called automatically.
    'title' => 'Restricted Menu Item',
    'page callback' => 'training_menu_callback',
    
    // Default:
    // 'access callback' => 'user_access',
    
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    
    // IMPORTANT: introduce hook_permissions and visit permissions UI.
    
    'access arguments' => array('administer training module'),
    'weight' => 10,
    'menu_name' => 'main-menu',
  );  
  
  
  // A menu entry with tabs.
  // For tabs we need at least 3 things:
  // 1. A parent MENU_NORMAL_ITEM menu item (examples/menu_example/tabs in this
  //    example.)
  // 2. A primary tab (the one that is active when we land on the base menu).
  //    This tab is of type MENU_DEFAULT_LOCAL_TASK.
  // 3. Some other menu entries for the other tabs, of type MENU_LOCAL_TASK.
  $items['training/menu_example/tabs'] = array(
    // 'type' => MENU_NORMAL_ITEM,  // Not necessary since this is the default.
    'title' => 'Tabs',
    'description' => 'Shows how to create primary and secondary tabs',
    'page callback' => 'training_menu_callback',
    'access callback' => TRUE,
    'weight' => 30,
  );

  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['training/menu_example/tabs/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Default primary tab',
    'weight' => 1,
  );
  
  // Now add the rest of the tab entries.
  foreach (array(t('second') => 2, t('third') => 3, t('fourth') => 4) as $tabname => $weight) {
    $items["training/menu_example/tabs/$tabname"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => $tabname,
      'page callback' => 'training_menu_callback',
      'access callback' => TRUE,

    // The weight property overrides the default alphabetic ordering of menu
    // entries, allowing us to get our tabs in the order we want.
      'weight' => $weight,
    );
  }
  
  // Form example.
  $items['training/form_example'] = array(
    'title' => 'Form Example',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('training_form_example'),
    'access callback' => TRUE,
    'expanded' => TRUE,
    'menu_name' => 'main-menu',
  );
  
  
  return $items;
}

/**
 * Implementing form callback.
 */
function training_form_example($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('A form with a fieldset'),
  );

  $form['name'] = array(
    '#type' => 'fieldset',
    '#title' => t('Name'),
  );
  $form['name']['first'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
  );
  $form['name']['last'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#weight' => 100,
  );
  return $form;  
}

/**
 * Validation callback.
 */
function training_form_example_validate($form, &$form_state) {

  if ($form_state['values']['first'] != 'Antonio') {
    form_set_error('first', t('You must be called Antonio!'));
  }
}

/**
 * Submit callback.
 */
function training_form_example_submit($form, &$form_state) {
  drupal_set_message(t('Form training_form_example submit callback'));
}

/**
 * Implements hook_form_FORMID_alter()
 * Altering form above.
 */
function training_form_training_form_example_alter(&$form) {

  $form['address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Address'),
    
    // Implementing custom theme.
    '#theme' => 'training_address',
  );
  
  $form['address']['street'] = array(
    '#type' => 'textfield',
    '#title' => t('Street'),
  );  
  $form['address']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
  );  
  $form['address']['country'] = array(
    '#type' => 'textfield',
    '#title' => t('Country'),
  );  
  
}

/**
 * Implements hook_theme()
 */
function training_theme() {
  return array(
    'training_address' => array(
      'render element' => 'element',
    ),    
  );
}

/**
 * Theme callback.
 */
function theme_training_address($variables) {
  $element = $variables['element'];
  
  $rows = array();
  $rows[] = array(
    drupal_render($element['street']),
    drupal_render($element['city']),
    drupal_render($element['country']),
  );
  
  return theme('table', array('rows' => $rows));
}

/**
 * Implements hook_permission()
 */
function training_permission() {
  return array(
    'administer training module' =>  array(
      'title' => t('Administer training module'),
      'description' => t('Perform administration tasks for the training module.'),
    ),
  );
}

/**
 * Menu callback.
 */
function training_menu_callback($argument = NULL) {
  
  if ($argument) {
    $argument = ', with some argument: '. $argument;
  }
  return 'Here some content'. $argument;
}

